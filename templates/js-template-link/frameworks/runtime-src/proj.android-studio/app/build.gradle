import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
}
android {
    compileSdkVersion 23
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.iflytek.leagueofglutton"
        minSdkVersion 15
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 20004
        versionName "2.0.4"
        multiDexEnabled true

        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'cocos2djs'
                    arguments 'NDK_TOOLCHAIN_VERSION=4.9'
                    arguments 'APP_PLATFORM=android-'+PROP_TARGET_SDK_VERSION
                    
                    def module_paths = [project.file("${COCOS_X_ROOT}"),
                                        project.file("${COCOS_X_ROOT}/cocos"),
                                        project.file("${COCOS_X_ROOT}/external")]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    arguments 'NDK_OUT=./obj'

                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
                }
            }
        }
    }
    lintOptions {
        abortOnError false
        disable 'MissingRegistered'
    }

	sourceSets {
		main {
			java.srcDir "src"
			res.srcDir "res"
			jniLibs.srcDir "libs"
			manifest.srcFile "AndroidManifest.xml"
			assets.srcDir "assets"
		}
        tmall {
            manifest.srcFile 'channel/common/AndroidManifest.xml'
            assets.srcDirs = ['assets', 'channel/common/assets']
        }

        unicom {
            manifest.srcFile 'channel/unicom/AndroidManifest.xml'
            assets.srcDirs = ['assets', 'channel/unicom/assets']
        }

        xiaowo {
            manifest.srcFile 'channel/xiaowo/AndroidManifest.xml'
            assets.srcDirs = ['assets', 'channel/xiaowo/assets']
        }
        jscmcc {

            manifest.srcFile 'channel/common/AndroidManifest.xml'
			assets.srcDirs = ['assets', 'channel/jscmcc/assets']
        }
        jxcmcc {
            manifest.srcFile 'channel/common/AndroidManifest.xml'
            assets.srcDirs = ['assets', 'channel/jxcmcc/assets']
        }
        shdx {

            manifest.srcFile 'channel/common/AndroidManifest.xml'
            assets.srcDirs = ['assets', 'channel/shdx/assets']
        }
        gddx {

            manifest.srcFile 'channel/gddx/AndroidManifest.xml'
            assets.srcDirs = ['assets', 'channel/gddx/assets']
        }
    }
    productFlavors {
        tmall {
            applicationId "com.iflytek.leagueofglutton"
        }
        unicom {
            applicationId "com.iflytek.leagueofglutton"
        }
        xiaowo {
            applicationId "com.iflytek.leagueofglutton"
        }
        jscmcc {
            applicationId "com.iflytek.leagueofglutton"
        }
        jxcmcc {
            applicationId "com.iflytek.leagueofglutton"
        }

        shdx {
            applicationId "com.iflytek.leagueofglutton"
        }
        gddx {
            applicationId "com.iflytek.leagueofglutton.egame"
        }
    }
    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }

	dexOptions {
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        copy {
           from "${buildDir}/../../../../../res"
           into "${buildDir}/intermediates/assets/${variant.dirName}/res"
        }

        copy {
            from "${buildDir}/../../../../../src"
            into "${buildDir}/intermediates/assets/${variant.dirName}/src"
        }

        copy {
            from "${buildDir}/../../../../../main.js"
            from "${buildDir}/../../../../../project.json"
            into "${buildDir}/intermediates/assets/${variant.dirName}"
        }

        copy {
            from "${COCOS_X_ROOT}/cocos/scripting/js-bindings/script"
            into "${buildDir}/intermediates/assets/${variant.dirName}/script"
        }
    }
}

def copySo() {
    copy {
        from('./obj/local') {
            include '**/*.so'
            exclude '**/objs*'
        }
        into './libs'
    }
}

private upperFirst(name) {
    return name[0].toUpperCase() + name[1..-1]
}

private findSourceSets(name) {
    return android.sourceSets.find { set -> name == "${set.name}" }
}

afterEvaluate {
	def buildTypes = ['Release', 'Debug']

	    android.productFlavors.each { flavor ->
	        def sourceSets = findSourceSets(flavor.name)
	        if (sourceSets.assets.srcDirs.size() > 1) {
	            // merge assets dirs
	            buildTypes.each { buildType ->
	                def upperFlavorName = upperFirst(flavor.name);
	                def prepareTask = tasks.findByName("prepare${upperFlavorName}${buildType}Dependencies")
	                prepareTask.dependsOn task("merge${upperFlavorName}${buildType}AssetsDirs", {
	                    def assetsDir = new File(project.buildDir, "intermediates/merged/assets/${flavor.name}/${buildType.toLowerCase()}")
	                    sourceSets.assets.srcDirs.each { dir ->
	                        copy {
	                            from file(dir)
	                            into assetsDir
	                        }
	                    }
	                    sourceSets.assets.srcDirs = [assetsDir.path];
	                })
	            }
	        }
	    }
    tasks.findByName('externalNativeBuildDebug')?.doLast {
        println ('Copying debug .so')
        copySo()
    }

    tasks.findByName('externalNativeBuildRelease')?.doLast {
        println ('Copying release .so')
        copySo()
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':libcocos2dx')
    compile project(':CommonUtil')
    compile project(':unipay')
    compile project(path: ':unipayforjs')

    tmallCompile project(':commonPay')

    unicomCompile project(':unicomPay')

    xiaowoCompile project(':xiaowoPay')

    jscmccCompile project(':jiangsucmccPay')

    jxcmccCompile project(':jiangxicmccPay')

    shdxCompile project(':commonPay')
    gddxCompile project(':gddxPay')

}
